import argparse
from pathlib import Path

from pipeline_migration.actions.migrate.main import clean_upgrades, migrate
from pipeline_migration.actions.migrate.constants import logger
from pipeline_migration.actions.migrate.resolvers import Resolver
from pipeline_migration.actions.migrate.resolvers.simple import SimpleIterationResolver
from pipeline_migration.actions.migrate.resolvers.transition_proxy import (
    DecentralizationTransitionResolverProxy,
)


def arg_type_upgrades_file(value: str) -> Path:
    p = Path(value)
    if not p.exists():
        raise argparse.ArgumentTypeError(f"Upgrades file {value} does not exist.")
    return p


def register_cli(subparser) -> None:
    migrate_parser = subparser.add_parser(
        "migrate", help="Discover and apply migrations for given task bundles upgrades."
    )
    group = migrate_parser.add_mutually_exclusive_group()
    group.add_argument(
        "-u",
        "--renovate-upgrades",
        metavar="JSON_STR",
        help="A JSON string converted from Renovate template field upgrades.",
    )
    group.add_argument(
        "-f",
        "--upgrades-file",
        metavar="PATH",
        type=arg_type_upgrades_file,
        help="Path to a file containing Renovate upgrades represented as encoded JSON data",
    )
    migrate_parser.add_argument(
        "-l",
        "--use-legacy-resolver",
        action="store_true",
        help="Use legacy resolver to fetch migrations.",
    )
    migrate_parser.set_defaults(action=action)


def action(args) -> None:
    resolver_class: type[Resolver]

    if args.use_legacy_resolver:
        resolver_class = SimpleIterationResolver
    else:
        resolver_class = DecentralizationTransitionResolverProxy

    if args.upgrades_file:
        upgrades_data = args.upgrades_file.read_text().strip()
    else:
        upgrades_data = args.renovate_upgrades

    if upgrades_data:
        upgrades = clean_upgrades(upgrades_data)
        if upgrades:
            migrate(upgrades, resolver_class)
        else:
            logger.warning(
                "Input upgrades does not include Konflux bundles the migration tool aims to handle."
            )
            logger.warning(
                "The upgrades should represent bundles pushed to quay.io/konflux-ci and be "
                "generated by Renovate tekton-bundle manager."
            )
    else:
        logger.info(
            "Empty input upgrades. Either upgrades file or upgrades JSON string must be specified."
        )
